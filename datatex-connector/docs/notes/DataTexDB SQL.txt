---------------------------------------------------------------------------------------------------
    Все транзакции в системе диспетчирования за 2017 год. Original query see in Confluence.
    Query is slightly modified in order to calculate as many values for further processing
    as possible.
---------------------------------------------------------------------------------------------------

--alter session set current_schema = now4;
--select count (*) from (
select
    -- start and end time
    --min(to_char(progressstartprocessdate, 'DD.MM.YYYY')||' '||to_char(progressstartprocesstime, 'HH24:Mi:SS')) as STARTTIME,
    stprog.START_TIME,
    enprog.END_TIME,
    -- current step/operation duration
    (to_timestamp(enprog.END_TIME) - to_timestamp(stprog.START_TIME)) as STEP_DURATION,
    -- operation start month number (numbers starting from 1 -> January)
    EXTRACT(month FROM to_date(stprog.START_TIME, 'DD.MM.YYYY HH24:Mi:SS')) as STEP_START_MONTH,
    -- operation year
    to_char(pprogress.creationdatetime, 'YYYY') as STEP_YEAR,
    pprogress.groupstepnumber                   as STEPNUMBER,
    pprogress.operationcode                     as OPERATION,
    tabl.art                                    as ITEMCODE,
    pprogress.machinecode                       as MACHINE,
    pprogress.productionordercode               as ORDERCODE,
    round(pprog.qty)                            as STEPQUANTITY,
    pprog.uom                                   as UOM,
    tabl.custorder                              as CUSTOMERORDER
from
    -- baseline table for query
    productionprogress pprogress

    -- alias STPROG: self join on [productionordercode, groupstepnumber] -> get operation start timestamp
    left join (
        select productionordercode, groupstepnumber,
            min(to_char(progressstartprocessdate, 'DD.MM.YYYY')||' '||to_char(progressstartprocesstime, 'HH24:Mi:SS')) as START_TIME
                from productionprogress
                    where progresstemplatecode = 'S1'
                        group by productionordercode, groupstepnumber
        ) STPROG on pprogress.productionordercode = stprog.productionordercode and pprogress.groupstepnumber = stprog.groupstepnumber

    -- alias ENPROG: self join on [productionordercode, groupstepnumber] -> get operation end timestamp
    left join (
        select productionordercode, groupstepnumber,
            max(to_char(progressenddate, 'DD.MM.YYYY')||' '||to_char(progressendtime, 'HH24:Mi:SS')) as END_TIME
                from productionprogress
                    where progresstemplatecode = 'E1'
                        group by productionordercode, groupstepnumber
    ) ENPROG on pprogress.productionordercode = enprog.productionordercode and pprogress.groupstepnumber = enprog.groupstepnumber

    -- alias PPROG: self join on [productionordercode, groupstepnumber] -> for operation total quantity (sum)
    left join (
        -- gets total quantity (sum) for order and step
        select productionordercode, groupstepnumber, primaryuomcode as uom, sum(primaryqty) as qty
        from productionprogress
        where progresstemplatecode in ('P1', 'E1')
        group by productionordercode, primaryuomcode, groupstepnumber
    ) pprog on pprogress.productionordercode = pprog.productionordercode and pprogress.groupstepnumber = pprog.groupstepnumber

    -- alias TABL: join with other tables on [productionordercode] -> for customer order and article number
    left join (
        select a.productionordercode, b.dlvsalorderlinesalesordercode as custorder,
            b.subcode01||'-'||b.subcode02||'-'||b.subcode03||'-'||b.subcode04||'-'||b.subcode05||'-'||b.subcode06 as art
        from productiondemandstep a, productiondemand b
        where a.productiondemandcode = b.code and a.productiondemandcountercode = b.countercode
        group by a.productionordercode, b.dlvsalorderlinesalesordercode,
            b.subcode01||'-'||b.subcode02||'-'||b.subcode03||'-'||b.subcode04||'-'||b.subcode05||'-'||b.subcode06
    ) tabl on tabl.productionordercode = pprogress.productionordercode

-- get dispatching transactions for concrete year
where pprogress.progresstemplatecode = 'S1' and to_char(pprogress.creationdatetime, 'YYYY') in ('2017')
    -- start timestamp always should be filled with reasonable value
    and progressstartprocessdate is not null and progressstartprocesstime is not null

group by stprog.START_TIME, enprog.END_TIME, pprogress.groupstepnumber, pprogress.operationcode, tabl.art,
    pprogress.machinecode, pprogress.productionordercode, round(pprog.qty), pprog.uom, tabl.custorder,
    to_char(pprogress.creationdatetime, 'YYYY')

order by customerorder
--)

---------------------------------------------------------------------------------------------------
    Select for data for visual report #1 - duration of processing for parties.
    Party id - production order, end of production cycle - the latest (by time) operation
    should have code 9000-***** (starts from 9000), otherwise - it isn't finished).
---------------------------------------------------------------------------------------------------
with source_data as (

select
    -- start and end time
    --min(to_char(progressstartprocessdate, 'DD.MM.YYYY')||' '||to_char(progressstartprocesstime, 'HH24:Mi:SS')) as STARTTIME,
    stprog.START_TIME,
    enprog.END_TIME,
    -- current step/operation duration
    (to_timestamp(enprog.END_TIME) - to_timestamp(stprog.START_TIME)) as STEP_DURATION,
    -- operation start month number (numbers starting from 1 -> January)
    EXTRACT(month FROM to_date(stprog.START_TIME, 'DD.MM.YYYY HH24:Mi:SS')) as STEP_START_MONTH,
    -- operation year
    to_char(pprogress.creationdatetime, 'YYYY') as STEP_YEAR,
    pprogress.groupstepnumber                   as STEPNUMBER,
    pprogress.operationcode                     as OPERATION,
    tabl.art                                    as ITEMCODE,
    pprogress.machinecode                       as MACHINE,
    pprogress.productionordercode               as PROD_ORDERCODE,
    round(pprog.qty)                            as STEPQUANTITY,
    pprog.uom                                   as UOM,
    tabl.custorder                              as CUSTOMERORDER
from
    -- baseline table for query
    productionprogress pprogress

    -- alias STPROG: self join on [productionordercode, groupstepnumber] -> get operation start timestamp
    left join (
        select productionordercode, groupstepnumber,
            --min(to_char(progressstartprocessdate, 'DD.MM.YYYY')||' '||to_char(progressstartprocesstime, 'HH24:Mi:SS')) as START_TIME
            to_char(min(progressstartprocessdate), 'DD.MM.YYYY')||' '||to_char(min(progressstartprocesstime), 'HH24:Mi:SS') as START_TIME
                from productionprogress
                    where progresstemplatecode = 'S1'
                        group by productionordercode, groupstepnumber
        ) STPROG on pprogress.productionordercode = stprog.productionordercode and pprogress.groupstepnumber = stprog.groupstepnumber

    -- alias ENPROG: self join on [productionordercode, groupstepnumber] -> get operation end timestamp
    left join (
        select productionordercode, groupstepnumber,
            max(to_char(progressenddate, 'DD.MM.YYYY')||' '||to_char(progressendtime, 'HH24:Mi:SS')) as END_TIME
                from productionprogress
                    where progresstemplatecode = 'E1'
                        group by productionordercode, groupstepnumber
    ) ENPROG on pprogress.productionordercode = enprog.productionordercode and pprogress.groupstepnumber = enprog.groupstepnumber

    -- alias PPROG: self join on [productionordercode, groupstepnumber] -> for operation total quantity (sum)
    left join (
        -- gets total quantity (sum) for order and step
        select productionordercode, groupstepnumber, primaryuomcode as uom, sum(primaryqty) as qty
        from productionprogress
        where progresstemplatecode in ('P1', 'E1')
        group by productionordercode, primaryuomcode, groupstepnumber
    ) pprog on pprogress.productionordercode = pprog.productionordercode and pprogress.groupstepnumber = pprog.groupstepnumber

    -- alias TABL: join with other tables on [productionordercode] -> for customer order and article number
    left join (
        select a.productionordercode, b.dlvsalorderlinesalesordercode as custorder,
            b.subcode01||'-'||b.subcode02||'-'||b.subcode03||'-'||b.subcode04||'-'||b.subcode05||'-'||b.subcode06 as art
        from productiondemandstep a, productiondemand b
        where a.productiondemandcode = b.code and a.productiondemandcountercode = b.countercode
        group by a.productionordercode, b.dlvsalorderlinesalesordercode,
            b.subcode01||'-'||b.subcode02||'-'||b.subcode03||'-'||b.subcode04||'-'||b.subcode05||'-'||b.subcode06
    ) tabl on tabl.productionordercode = pprogress.productionordercode

-- get dispatching transactions for concrete year
where pprogress.progresstemplatecode = 'S1' and to_char(pprogress.creationdatetime, 'YYYY') in ('2017')
    -- start timestamp always should be filled with reasonable value
    and progressstartprocessdate is not null and progressstartprocesstime is not null
    -- !!!!!! remove line below !!!!!!
    --and  pprogress.productionordercode = '0002749Z0'

group by stprog.START_TIME, enprog.END_TIME, pprogress.groupstepnumber, pprogress.operationcode, tabl.art,
    pprogress.machinecode, pprogress.productionordercode, round(pprog.qty), pprog.uom, tabl.custorder,
    to_char(pprogress.creationdatetime, 'YYYY')

order by start_time desc, customerorder
)

-- select from result set "all transactions for specific year"
select
    -- what? ordercode/itemcode
    sd1.prod_ordercode, sd1.itemcode,
    -- start and end timestamps
    min(to_timestamp(sd1.start_time)) as order_start, max(to_timestamp(sd1.end_time)) as order_end,
    -- duration of the order (data type -> interval)
    (max(to_timestamp(sd1.end_time)) - min(to_timestamp(sd1.start_time))) as order_duration,

    -- calculation for duration - converting intervla to seconds
    (EXTRACT( DAY    FROM (max(to_timestamp(sd1.end_time)) - min(to_timestamp(sd1.start_time))) ) * 86400 +
     EXTRACT( HOUR   FROM (max(to_timestamp(sd1.end_time)) - min(to_timestamp(sd1.start_time))) ) *  3600 +
     EXTRACT( MINUTE FROM (max(to_timestamp(sd1.end_time)) - min(to_timestamp(sd1.start_time))) ) *    60 +
     EXTRACT( SECOND FROM (max(to_timestamp(sd1.end_time)) - min(to_timestamp(sd1.start_time))) )) as order_duration_seconds,

    -- last operation for current production order
    sd2.operation
from
    -- self join of source table
    source_data sd1, source_data sd2
where
    -- join for sd2
    sd1.prod_ordercode = sd2.prod_ordercode and sd1.itemcode = sd2.itemcode
    -- criteria for getting last operation value
    and sd2.end_time =
        -- we can't use function here (max), so we have to do it in separate select)
        (select to_char(max(to_timestamp(end_time)), 'DD.MM.YYYY HH24:Mi:SS') from source_data
            where prod_ordercode = sd1.prod_ordercode and itemcode = sd1.itemcode)
group by
    sd1.prod_ordercode, sd1.itemcode, sd2.operation;
---------------------------------------------------------------------------------------------------

Departments
select
adc.valuestring as DEPT_ID,
ads.valuestring as DEPT_NAME
from adstorage adc,
costcenter cc,
adstorage ads
where cc.absuniqueid = adc.uniqueid
and adc.namename ='AccCostCenterCode'
and cc.absuniqueid = ads.uniqueid
and ads.namename ='AccCostCenterDscr'
--------------------------------------------------------------------------------
List of equipment
select
wcd.mainresourcecode as ID,
wcd.workcentercode as EQUIPMENT_ID,
ad.valuestring as DEPT_ID,
wc.longdescription as NAME,
wcd.mainresourcecode as MODEL
from workcenterdetail wcd,
workcenter wc left join costcenter cc on wc.costcentercode = cc.code left join adstorage ad on cc.absuniqueid = ad.uniqueid and ad.namename = 'AccCostCenterCode'
where wcd.workcentercode = wc.code
--------------------------------------------------------------------------------
Current work in progress
WITH seasons AS (
    SELECT
      DISTINCT
      po.code        AS prodordercode,
      aa.VALUESTRING AS VALUESTRING
    FROM productionorder po
      LEFT JOIN PRODUCTIONDEMANDSTEP pds
        ON po.code = pds.PRODUCTIONORDERCODE
      LEFT JOIN PRODUCTIONDEMAND pd
        ON pd.COUNTERCODE = pds.PRODUCTIONDEMANDCOUNTERCODE
           AND pds.PRODUCTIONDEMANDCODE = pd.CODE
      LEFT JOIN SALESORDER so
        ON pd.DLVSALORDLINESALORDCNTCODE = so.COUNTERCODE
           AND pd.DLVSALORDERLINESALESORDERCODE = so.CODE
      JOIN ADSTORAGE aa
        ON so.ABSUNIQUEID = aa.UNIQUEID
           AND aa.NAMENAME = 'SalesSeasonType'
           AND aa.VALUESTRING IS NOT NULL
)
SELECT
  --"Рабочий центр",
  '''' ||w.LONGDESCRIPTION                                     AS "Рабочий центр",
  --"Операция",
  '''' ||OPERATION.SHORTDESCRIPTION                            AS "Операция",
  -- "Заказ Произ",
  '''' ||a."P1_OrdCode"                                        AS "Заказ Произ",
--"Подразделение",
  '''' ||Department.VALUESTRING                                AS "Подразделение",
    --"Изделие",
  '''' ||fikd.SUMMARIZEDDESCRIPTION                            AS "Изделие",
  --"Изделие (код)",
  '''' ||a."SC"                                                AS "Изделие (код)",
    --"Ко имя изделия",
  '''' ||USERGENERICGROUP.LONGDESCRIPTION                      AS "Кор имя изд-я",
  --"Количество, м",
a."Q"                                                 AS "Количество, м",
   --"группа 1С",

  '''' ||nvl(Group1C.VALUESTRING, 'не зап соотв') AS "группа 1С",
  --"ГОЗ/КОММ",
  '''' ||CASE
  WHEN tContractType.VALUESTRING IS NULL
    THEN 'не заполнено соответствие'
  WHEN tContractType.VALUESTRING = '002'
    THEN 'State'
  WHEN tContractType.VALUESTRING = '001'
    THEN 'Commercial'
  ELSE 'Departmental' END                               AS "ГОЗ/КОММ",
--"Образец да/нет",
  '''' ||CASE
  WHEN tSample.VALUEBOOLEAN = '1'
    THEN 'Sample'
  ELSE 'Standard' END                                   AS "Образец да/нет",
    --"Дата",
   '''' ||a."maxdate"                                           AS "Дата",
  --"Количество, кг",
  a."SQ"                                                AS "Количество, кг",
'''' ||nvl(seasons.VALUESTRING, 'нет данных')                AS "Сезон ГОЗ/КОМ" --"Сезон ГОЗ/КОМ"
FROM wiipfin@MSSQL a
  --Item descr read
  LEFT JOIN FULLITEMKEYDECODER fikd
    ON
      a.SC = fikd.SUBCODE01 || '-' || fikd.SUBCODE02 || '-' || fikd.SUBCODE03 || '-' || fikd.SUBCODE04 || '-' || fikd.SUBCODE05 || '-' || fikd.SUBCODE06
  LEFT JOIN
  WORKCENTER w ON w.CODE = a."P1_WrkCenter"
  LEFT JOIN seasons ON seasons.prodordercode = a."P1_OrdCode"
  --Department.docx
  LEFT JOIN COSTCENTER cc ON w.COSTCENTERCODE = cc.CODE
  LEFT JOIN
  ADSTORAGE Department
    ON
      cc.ABSUNIQUEID = Department.UNIQUEID AND
      Department.NAMENAME = 'AccCostCenterCode'
      AND Department.NAMEENTITYNAME = 'CostCenter'
  LEFT JOIN OPERATION ON OPERATION.CODE = a."P1_OprCode"
  LEFT JOIN USERGENERICGROUP ON a."PR_FIRSTUSERGRPCODE" = USERGENERICGROUP.code and USERGENERICGROUP.USERGENERICGROUPTYPECODE = 'FGT'
  LEFT JOIN ADSTORAGE Group1C ON fikd.ABSUNIQUEID = Group1C.UNIQUEID AND Group1C.NAMENAME = 'Article1CGroup'
  LEFT JOIN PRODUCT p ON p.SUBCODE01 || '-' || p.SUBCODE02 || '-' || p.SUBCODE03 || '-' || p.SUBCODE04 = a."conttype"
  LEFT JOIN ADSTORAGE tContractType ON p.ABSUNIQUEID = tContractType.UNIQUEID AND tContractType.NAMENAME = 'ContractType'
  LEFT JOIN ADSTORAGE tSample ON p.ABSUNIQUEID = tSample.UNIQUEID AND tSample.NAMENAME = 'Sample'
ORDER BY   a."P1_OrdCode" ASC, OPERATION.SHORTDESCRIPTION ASC,w.LONGDESCRIPTION ASC
--------------------------------------------------------------------------------

Clients orders:
  select fkd.subcode01||'-'||fkd.subcode02||'-'||fkd.subcode03||'-'||fkd.subcode04||'-'||fkd.subcode05||'-'||fkd.subcode06 as CODE,
  rts.operationcode||'-'||rts.workcenterandoperattributescod as ID,
  rts.longdescription as NAME,
  To_char(rts.sequence) as NOP,
  dpt.DEPT_ID as DEPT_ID,
  rts.workcentercode as EQUIPMENT_ID,
  0 as T_PZ,
  0 as T_NAL,
  0 as T_SHT
  from fullitemkeydecoder fkd left join MCProductBoMRtg prd on (fkd.itemtypecode = '200' and prd.productsubcode01=fkd.subcode01 and prd.productsubcode02=fkd.subcode02 and prd.productsubcode03=fkd.subcode03 and prd.productsubcode04=fkd.subcode04) or (fkd.itemtypecode in ('100', '110', '115') and prd.productsubcode01=fkd.subcode01 and prd.productsubcode02=fkd.subcode02)
  left join routingstep rts on prd.rtgsubcode01=rts.routingsubcode01 and prd.rtgsubcode02=rts.routingsubcode02 left join
  (select
  adc.valuestring as DEPT_ID,
  wc.code as EQUIPMENT_ID
  from adstorage adc,
  costcenter cc,
  workcenter wc
  where cc.absuniqueid = adc.uniqueid
  and adc.namename ='AccCostCenterCode'
  and cc.code = wc.costcentercode) dpt on dpt.EQUIPMENT_ID = rts.workcentercode
  where fkd.itemtypecode in ('100', '110', '115', '200') and rts.operationcode is not null
--------------------------------------------------------------------------------
All dispatching transactions for year (2017):
  select min(To_char(progressstartprocessdate, 'DD.MM.YYYY')||' '||To_char(progressstartprocesstime, 'HH24:Mi:SS')) as STARTTIME,
  eprog.etime as ENDTIME,
  sprog.groupstepnumber as STEPNUMBER,
  sprog.operationcode as OPERATION,
  tabl.art as ITEMCODE,
  sprog.machinecode as MACHINE,
  sprog.productionordercode as ORDERCODE,
  round(pprog.qty) as STEPQUANTITY,
  pprog.uom as UOM,
  tabl.custorder as CUSTOMERORDER
  from productionprogress sprog left join (select productionordercode, groupstepnumber, max(To_char(progressenddate, 'DD.MM.YYYY')||' '||To_char(progressendtime, 'HH24:Mi:SS'))  as etime from productionprogress where progresstemplatecode = 'E1' group by productionordercode, groupstepnumber) eprog on sprog.productionordercode = eprog.productionordercode and sprog.groupstepnumber = eprog.groupstepnumber
  left join (select productionordercode, groupstepnumber, primaryuomcode as uom, sum(primaryqty) as qty from productionprogress where progresstemplatecode in ('P1', 'E1') group by productionordercode, primaryuomcode, groupstepnumber) pprog on sprog.productionordercode = pprog.productionordercode and sprog.groupstepnumber = pprog.groupstepnumber,
  (select a.productionordercode, b.subcode01||'-'||b.subcode02||'-'||b.subcode03||'-'||b.subcode04||'-'||b.subcode05||'-'||b.subcode06 as art, b.dlvsalorderlinesalesordercode as custorder from productiondemandstep a, productiondemand b where a.productiondemandcode = b.code and a.productiondemandcountercode = b.countercode group by a.productionordercode, b.subcode01||'-'||b.subcode02||'-'||b.subcode03||'-'||b.subcode04||'-'||b.subcode05||'-'||b.subcode06, b.dlvsalorderlinesalesordercode) tabl

  where tabl.productionordercode = sprog.productionordercode
  and sprog.progresstemplatecode = 'S1'
  and to_char(sprog.creationdatetime, 'YYYY') in ('2017')
  group by eprog.etime,
  sprog.groupstepnumber,
  sprog.operationcode,
  tabl.art,
  sprog.machinecode,
  sprog.productionordercode,
  round(pprog.qty),
  pprog.uom,
  tabl.custorder
