/**
    Gradle build file for the project. Initial version was generated by gradle.
    See more info here: https://docs.gradle.org/7.6/userguide/building_java_projects.html

    Created:  Dmitrii Gusev, Jan 2023 (gradle generated)
    Modified: Dmitrii Gusev, 24.01.2023
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    mavenCentral() // Using Maven Central for resolving dependencies (should be enough).
}

ext {

    defaultEncoding       = 'UTF-8'
    lombokVersion         = '1.18.24'
    junit5Version         = '5.9.1'
    //junit5PlatformVersion = '1.8.1'
    commonsLang3Version   = '3.12.0'
    commonsCsvVersion     = '1.9.0'
    commonsIOVersion      = '2.11.0'
    slf4jVersion          = '2.0.6'
    logbackVersion        = '1.4.5'
}

sourceCompatibility = JavaVersion.VERSION_15
targetCompatibility = JavaVersion.VERSION_15

dependencies {

    // -- implementation/compile dependencies

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation "com.google.guava:guava:31.1-jre"
    implementation group: "org.apache.commons", name: "commons-csv", version: "${commonsCsvVersion}"
    implementation group: "org.apache.commons", name: "commons-lang3", version: "${commonsLang3Version}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation "ch.qos.logback:logback-core:${logbackVersion}"
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"

    // -- testing dependencies

    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter:${junit5Version}"

}

application {
    // Define the main class for the application.
    mainClass = "edu.dmgusev.SimpleApplication"
}

tasks.named("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = "${defaultEncoding}"
}
